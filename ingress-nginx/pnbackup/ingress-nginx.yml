apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: default
  name: default-token
  namespace: ingress-nginx
type: kubernetes.io/service-account-token
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN3akNDQWFxZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkcmRXSmwKTFdOaE1CNFhEVEU1TURVeU56QTVNREkxTmxvWERUSTVNRFV5TkRBNU1ESTFObG93RWpFUU1BNEdBMVVFQXhNSAphM1ZpWlMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtOTTJLZUJDbHZCClJRU2IvU1RqMXh1VkRGdzQvZExpcUJ3emQ3M1FqTnpmZFNVUkV4dE0rNEFrU0U2Z3Y2NVhQSUhZOTV2bENXZGQKSEd5V3RoQit1SVNLOFZwL29VbDB4SXF5Y1RaNzgzZ2NSM1BTRSt1NWVTUFh6MFZkMzc2ZFVXY2YzSEVUcTRLQwpFa0hEYmdzU0JjbUdyT0lFMG5WY0U1dm9WQUxzTnNwazZOYWgrcDl2ejZobUxmTFZOUy83Y1FTUmFZSmE1Qy9qCnpRdXNRQldwVE44YkVYOGVPRFlBd0xYRWZBNm0vQWFobHMzbGxDUGlBa2ltbHhWa0lvUEVDSi9WeCtWS0ovTUYKQUdWK21jcTRDMkxqUzRkc0RpZ3BPNkt5cHVzWGZ2ZC9OZkhJaU0xY2NCYzNRYktFZnFueDkrRmNIbzJDd0tqOApUM0cwNXB0TkxRVUNBd0VBQWFNak1DRXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRUhJQTBFUmRuSTRuSWFHR09uNytSZGhGTmZlSVUvYi9LeksKUXhrdWxXMzZiNlNyTGJ3anVlcHRGZW5jK0l0ZllxOGJBMFk3akdudjd4MEFLaTBkMm80VHdScm96MHN6TWlSSQpydXMweENYVkJMNVhrd1l2ZTh4WTN4MS9WaXg2SXlEa1N1S0w4MnBZRks1ZlBzNWUyR2d5THZ5QmZqVlMrcDJkClY1c1JpckVmWnpzT1ZaektncFREZHBoN3FIUWNrKzZncDN1T2xOVzZnRm5IeTUxVUFlMytibHgyZVU3ZWxXME0KSFlyd1dBbUJBVHYyTUtUWnluVTloSGlHQVdxVVVLcmJSbnRVNFhLUmR6OWtYUG5zcTg1VUZtOUZRZ1U3eklhRAozbFNvUzdQK1plUzFpb2tGTEg1Y2YzbG9sbEVRTHZQN2hIQzdTUlhsMXkxNmFEY1hXRTA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  namespace: aW5ncmVzcy1uZ2lueA==
  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSnBibWR5WlhOekxXNW5hVzU0SWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaV055WlhRdWJtRnRaU0k2SW01bmFXNTRMV2x1WjNKbGMzTXRjMlZ5ZG1salpXRmpZMjkxYm5RdGRHOXJaVzR0Ylc1NGNYQWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzV1WVcxbElqb2libWRwYm5ndGFXNW5jbVZ6Y3kxelpYSjJhV05sWVdOamIzVnVkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJamxpT1dWbFkySTFMVGd3TldVdE1URmxPUzFoWXpZd0xUQXdOVEExTmprNFlXVXhZaUlzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwcGJtZHlaWE56TFc1bmFXNTRPbTVuYVc1NExXbHVaM0psYzNNdGMyVnlkbWxqWldGalkyOTFiblFpZlEuSTk4ZnQ4T2MwYVpWTlZwMHpkQmw1V0g0UWtKVlhFOFZfRTduVVZqVEN0S2RPYTNlTXZtaTllZFBTWV9XWE9ZZkdvRVMwQVlCUTJMT3VBSFhFLWtJRGlkdVZHdjF1amw3Vmk5TVo2UnRyaFVqWFJaSF9UeFN2dGRmeWktRlI3LWoxYTBKMmNPTlRVV3VaRnhFREpxdTJhTFJ1clY1c041bjJMRGFiUEtmXy1XdUk2cGpVS212MEsxRDUtSXB2aDl0U2JiZFpadmt1ZkRVRFNpOGp5WGtQdk9vVWhpMVRYeGRoSkN6VlVTR2ZrUWhOekhyZ3ZIanlRY25wbDc1SVRwSTNSQkVkRlhKbzhTWWNnVnpsNDZHNmVWM0loYi1sZWlrMGJfeElPTlhWOUlhczJnX3BBZzQ0UG1uS2NXSnAwUmZQekg5ekpRa1NZMlFtMVdoYU9MOF93
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: nginx-ingress-serviceaccount
  creationTimestamp: "2019-05-27T09:05:43Z"
  name: nginx-ingress-serviceaccount-token
  namespace: ingress-nginx
type: kubernetes.io/service-account-token
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: default-http-backend
  name: default-http-backend
  namespace: ingress-nginx
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: default-http-backend
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion:  apps/v1
kind: DaemonSet
metadata:
  labels:
    app: ingress-nginx
  name: nginx-ingress-controller
  namespace: ingress-nginx
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        app: ingress-nginx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/os
                operator: NotIn
                values:
                - windows
      containers:
      - args:
        - /nginx-ingress-controller
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
        - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
        - --annotations-prefix=nginx.ingress.kubernetes.io
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: rancher/nginx-ingress-controller:0.16.2-rancher1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: nginx-ingress-controller
        ports:
        - containerPort: 80
          hostPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          hostPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          procMount: Default
          runAsUser: 33
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: nginx-ingress-serviceaccount
      serviceAccountName: nginx-ingress-serviceaccount
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: OnDelete
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: default-http-backend
  name: default-http-backend
  namespace: ingress-nginx
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: default-http-backend
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: default-http-backend
    spec:
      containers:
      - image: rancher/nginx-ingress-controller-defaultbackend:1.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: default-http-backend
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 60
